# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XkdhMQLn5OjECA6itff3ER495FFrLqtF
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib
matplotlib.rcParams["figure.figsize"] = (20,10)

df1 = pd.read_csv('Bengaluru_House_Data.csv')
df1.head()

df1.shape

df1.columns

df1['area_type'].unique()

df1['area_type'].value_counts()

df2 = df1.drop(['area_type', 'society', 'balcony', 'availability'], axis = 'columns')
df2.shape

df2.isnull().sum()

df2.shape

df3 = df2.dropna()
df3.isnull().sum()

df3.shape

df3['bhk'] = df3['size'].apply(lambda x: int(x.split(' ')[0]))
df3.bhk.unique()

def is_float(x):
  try:
    float(x)
  except:
    return False
  return True

df3[~df3['total_sqft'].apply(is_float)].head(10)

def convert_sqft_to_num(x):
  tokens = x.split('-')
  if len(tokens) == 2:
    return (float(tokens[0]) + float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None

convert_sqft_to_num('2100-3000')

df4 = df3.copy()
df4.total_sqft = df4.total_sqft.apply(convert_sqft_to_num)
df4 = df4[df4.total_sqft.notnull()]
df4.head(2)

df4.loc[30]

df5 = df4.copy()
df5['price_per_sqft'] = df5['price']*100000/df5['total_sqft']
df5.head()

df5_stats = df5['price_per_sqft'].describe()
df5_stats

df5.to_csv("bhp.csv", index = False)

df5.location = df5.location.apply(lambda x: x.strip())
location_stats = df5['location'].value_counts(ascending = False)
location_stats

location_stats.values.sum()

len(location_stats[location_stats > 10])

len(location_stats)

len(location_stats[location_stats <= 10])

location_stats_less_than_10 = location_stats[location_stats <= 10]
location_stats_less_than_10

len(df5.location.unique())

df5.location = df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
len(df5.location.unique())

df5.head(10)

df5[df5.total_sqft/df5.bhk < 300].head()

df5.shape

df6 = df5[~(df5.total_sqft/df5.bhk < 300)]
df6.shape

df6.price_per_sqft.describe()

def remove_pps_outliers(df):
  df_out = pd.DataFrame()
  for key, subdf in df.groupby('location'):
    m = np.mean(subdf.price_per_sqft)
    st = np.std(subdf.price_per_sqft)
    reduced_df = subdf[(subdf.price_per_sqft > (m - st)) & (subdf.price_per_sqft <= (m + st))]
    df_out = pd.concat([df_out, reduced_df], ignore_index = True)
  return df_out
df7 = remove_pps_outliers(df6)
df7.shape

def plot_scatter_chart(df,location):
    bhk2 = df[(df.location == location) & (df.bhk == 2)]
    bhk3 = df[(df.location == location) & (df.bhk == 3)]
    matplotlib.rcParams['figure.figsize'] = (15, 10)
    plt.scatter(bhk2.total_sqft, bhk2.price, color = 'blue', label = '2 BHK', s = 50)
    plt.scatter(bhk3.total_sqft, bhk3.price, marker='+', color='green', label='3 BHK', s = 50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price (Lakh Indian Rupees)")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df7,"Rajaji Nagar")

plot_scatter_chart(df7, "Hebbal")

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bhk'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('bhk'):
            stats = bhk_stats.get(bhk - 1)
            if stats and stats['count'] > 5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices, axis = 'index')
df8 = remove_bhk_outliers(df7)
df8.shape

plot_scatter_chart(df8, "Rajaji Nagar")

plot_scatter_chart(df8, "Hebbal")

import matplotlib
matplotlib.rcParams['figure.figsize'] = (20,10)
plt.hist(df8.price_per_sqft, rwidth = 0.8)
plt.xlabel("Price Per Square feet")
plt.ylabel("Count")

df8.bath.unique()

plt.hist(df8.bath, rwidth = 0.8)
plt.xlabel("Number of bathrooms")
plt.ylabel("Count")

df8[df8.bath > 10]

df8[df8.bath > df8.bhk + 2]

df9 = df8[df8.bath < df8.bhk + 2]
df9.shape

df9.head(2)

df10 = df9.drop(['size', 'price_per_sqft'], axis = 'columns')
df10.head(3)

dummies = pd.get_dummies(df10.location)
dummies.head(3)

df11 = pd.concat([df10, dummies.drop('other', axis = 'columns')], axis = 'columns')
df11.head()

df12 = df11.drop('location', axis = 'columns')
df12.head(2)

df12.shape

x = df12.drop(['price'], axis = 'columns')
x.head()

y = df12.price
y.head()

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.8)

from sklearn.linear_model import LinearRegression
lr_clf = LinearRegression()
lr_clf.fit(x_train, y_train)
lr_clf.score(x_test,y_test)

def predict_price(location, sqft, bath, bhk):
  loc_index = np.where(x.columns == location)[0][0]
  xv = np.zeros(len(x.columns))
  xv[0] = sqft
  xv[1] = bath
  xv[2] = bhk
  if loc_index >= 0:
    xv[loc_index] = 1
  return lr_clf.predict([xv])[0]

predict_price('1st Phase JP Nagar', 1000, 2, 2)

predict_price('1st Block Jayanagar', 2000, 3, 4)